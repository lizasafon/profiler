#include <iostream>
#include <BST_with_virtual_methods.cpp>
using namespace std;

class AVL_BinSearchTree : public BinSearchTree
{
  public:
    void insert(int numb)
    {
        start = insert(numb, start);
    }

    void erase(int numb)
    {
        start = erase(numb, start);
    }

    void makeEmpty(uzel* t)
    {
        if(t == NULL)
            return;
        makeEmpty(t->left);
        makeEmpty(t->right);
        delete t;
    }
    void display()
    {
        inorder(start);
        cout << endl;
    }

  protected:
    uzel* insert(int x, uzel* t)
    {
        if(t == NULL)
            t = new uzel(x);
        else if(x < t->key)
        {
            t->left = insert(x, t->left);
            if(height(t->left) - height(t->right) == 2)
            {
                if(x < t->left->key)
                    t = singleRightRotate(t);
                else
                    t = doubleRightRotate(t);
            }
        }
        else if(x > t->key)
        {
            t->right = insert(x, t->right);
            if(height(t->right) - height(t->left) == 2)
            {
                if(x > t->right->key)
                    t = singleLeftRotate(t);
                else
                    t = doubleLeftRotate(t);
            }
        }
        t->height = max(height(t->left), height(t->right))+1;
        return t;
    }

    uzel* singleRightRotate(uzel* &t)
    {
        uzel* u = t->left;
        t->left = u->right;
        u->right = t;
        t->height = max(height(t->left), height(t->right))+1;
        u->height = max(height(u->left), t->height)+1;
        return u;
    }

    uzel* singleLeftRotate(uzel* &t)
    {
        uzel* u = t->right;
        t->right = u->left;
        u->left = t;
        t->height = max(height(t->left), height(t->right))+1;
        u->height = max(height(t->right), t->height)+1 ;
        return u;
    }

    uzel* doubleLeftRotate(uzel* &t)
    {
        t->right = singleRightRotate(t->right);
        return singleLeftRotate(t);
    }

    uzel* doubleRightRotate(uzel* &t)
    {
        t->left = singleLeftRotate(t->left);
        return singleRightRotate(t);
    }

    uzel* findMin(uzel* t)
    {
        if(t == NULL)
            return NULL;
        else if(t->left == NULL)
            return t;
        else
            return findMin(t->left);
    }

    uzel* findMax(uzel* t)
    {
        if(t == NULL)
            return NULL;
        else if(t->right == NULL)
            return t;
        else
            return findMax(t->right);
    }
    uzel* erase(int x, uzel* t)
    {
        uzel* temp;

        // Element not found
        if(t == NULL)
            return NULL;

        // Searching for element
        else if(x < t->key)
            t->left = erase(x, t->left);
        else if(x > t->key)
            t->right = erase(x, t->right);

        // Element found
        // With 2 children
        else if(t->left && t->right)
        {
            temp = findMin(t->right);
            t->key = temp->key;
            t->right = erase(t->key, t->right);
        }
        // With one or zero child
        else
        {
            temp = t;
            if(t->left == NULL)
                t = t->right;
            else if(t->right == NULL)
                t = t->left;
            delete temp;
        }
        if(t == NULL)
            return t;

        t->height = max(height(t->left), height(t->right))+1;

        // If uzel is unbalanced
        // If left uzel is deleted, right case
        if(height(t->left) - height(t->right) == 2)
        {
            // right right case
            if(height(t->left->left) - height(t->left->right) == 1)
                return singleLeftRotate(t);
            // right left case
            else
                return doubleLeftRotate(t);
        }
        // If right uzel is deleted, left case
        else if(height(t->right) - height(t->left) == 2)
        {
            // left left case
            if(height(t->right->right) - height(t->right->left) == 1)
                return singleRightRotate(t);
            // left right case
            else
                return doubleRightRotate(t);
        }
        return t;
    }

    int height(uzel* t)
    {
        return (t == NULL ? -1 : t->height);
    }

    int getBalance(uzel* t)
    {
        if(t == NULL)
            return 0;
        else
            return height(t->left) - height(t->right);
    }

    void inorder(uzel* t)
    {
        if(t == NULL)
            return;
        inorder(t->left);
        cout << t->key << " ";
        inorder(t->right);
    }

};
